# -*- coding: utf-8 -*-
"""interface.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m3AsFRknW0punAzrQfpVwqlmy_E1ftEn
"""
# import socket

import torch
import torch.optim as optim
import torch.nn as nn
import torch.nn.functional as F
from multiprocessing import Process
import multiprocessing


class CNN(nn.Module): #random CNN found from online
    def __init__(self):
        # Cindy: not sure if Net is missing, plz check
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = torch.flatten(x, 1) # flatten all dimensions except batch
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# cindy
class Client():
  def __init__(self, uid, replica_group_id, queue, bsz=32, epochs=10, indices=[0, 50]): #todo: fix initialization (get data, initialize model). port #?
    
    self.uid = uid
    self.replica_group_id = replica_group_id
    self.queue = queue
    
    # MODEL
    self.model = CNN() 

    # TRAINING HYPERPARAMETERS
    self.batch_size = bsz
    self.num_epochs = epochs
    # SGD inputs
    self.random_seed = 0
    self.params = self.model.parameters() 
    self.lr = 0.1
    self.momentum = 0
    self.weight_decay = 0
    self.dampening = 0
    self.nesterov = False
    self.maximize = False

    # DATA
    # dataset
    # self.partititon = dataset[indices[0]:indices[1]]
    # self.train_set = torch.utils.data.DataLoader(partition, batch_size=bsz, shuffle=True)
    # self.test_set = None
  
  def copy():
    return None

  # train local round 
  # added model bc need inplace modification for multiprocessing - Neha
  def train(self):
    # sgd algo
    torch.manual_seed(self.random_seed)
    optimizer = optim.SGD(self.params, lr = self.lr, momentum = self.momentum, weight_decay = self.weight_decay, dampening = self.dampening, nesterov = self.nesterov, maximize = self.maximize)
    losses = []
    for epoch in range(self.num_epochs):
      epoch_loss = 0.0
      for data, target in self.train_set:
        optimizer.zero_grad()
        output = self.model(data)
        loss = nn.MSELoss(output, target)
        epoch_loss += loss.item()
        loss.backward()
        optimizer.step()
        losses.append(epoch_loss)

  #receive info from server: data, training hyperparameters, etc.
  def recieve_training_info(self):
    data = self.client_socket.recv(1024).decode()
  
  #send message to server
  def send_message(self, msg):
    #execute the random delay
    self.queue.put(msg)

  #recieve aggregated model from server
  def receive_message(self):
    print("client ", self.uid, "recieved ", self.queue.get().content, " from server")
    # TODO: update gradients?

class Server: #todo: send indices of data to client
  def __init__(self):
    self.client_id_to_metadata_dict = {} 
    #client_id_to_metadata_dict[client_uid] = (client object, replica_group_id)

    self.replica_group_id_to_client_uids = {}
    #replica_id_to_client_copy[replica_group_id] = (primary client uid, [client uids corresponding to this replica_group])

    self.latest_client_uid = 1025 #non priviliged ports are > 1023
    self.latest_replica_group_id = 0

  #replica_id is specified if this new client is spawned to be a replica of group replica_id. Otherwise, None
  #returns new client uid
  def spawn_new_client(self, make_replica = False, replica_group_id = None, replica_client_uid = None, data_ind_if_not_replica = None): #TODO 
    self.latest_client_uid += 1
    if make_replica:
      #assign new client the exact copy of original client 
      self.client_id_to_metadata_dict[self.latest_client_uid] = (self.client_id_to_metadata_dict[replica_client_uid][0].copy(), replica_group_id) #TODO client .copy()

      #add new client to replica data
      self.replica_group_id_to_client_uids[replica_group_id][1].append(self.latest_client_uid)
    else:
      self.latest_replica_group_id += 1
      new_client_q = multiprocessing.Queue()
      new_client = Client(self.latest_client_uid,self.latest_replica_group_id, new_client_q, indices=data_ind_if_not_replica)
      self.client_id_to_metadata_dict[self.latest_client_uid] = (new_client, self.latest_replica_group_id) #TODO 

    return self.client_id_to_metadata_dict[self.latest_client_uid][0]

  #write code to have the weights from clients collected in organized fashion
  def aggregate(self, messages, weights): #aggregate local training rounds (Averaging) 
    msg_sum = None
    for message_curr_i in range(len(messages)):
      message_curr = messages[message_curr_i]
      if msg_sum is None:
        msg_sum = message_curr.content
      else:
        msg_sum += weights[message_curr_i] * message_curr.content
    return msg_sum / len(messages)
  

  #server sends 1
  def send_message(self, message):
    for (client, _) in self.client_id_to_metadata_dict.values():
      client.queue.put(message)
  
  def receive_message(self): #waits for the next recieved message, times out after a point
    for (client, _) in self.client_id_to_metadata_dict.values():
      print("server received: ", client.queue.get().content, " from ", client.uid)
  



# Neha
class Message:

  def __init__(self, content, sender=None, receiver=None, delay = False):
    self.content = content #numpy array of weights
    self.round_number = 0
    self.sender = sender #source ID
    self.receiver = receiver #dest ID
    self.delay = delay #if there is a delay, we can trigger it when sending message

class RunTraining: #TODO: make it work end to end. create a new server. blah blah blah 

  def __init__(self, num_clients):
    self.s = Server()
    self.clients = []
    self.client_to_process_dict= {}
    self.num_rounds = 1

    for _ in range(num_clients):
      curr_client = self.s.spawn_new_client()
      self.clients.append(curr_client)


  def forward(self):
    print("called forward")

    model = None #averaged model

    for _ in range(self.num_rounds): #num global rounds

      # SERVER TO CLIENT ROUND 1 
      print("SERVER TO CLIENT ROUND 1")
      running_tasks = []
      running_tasks.append(Process(target=self.s.send_message, args=(Message("server to client round 1"), )))

      #run tasks and join
      for running_task in running_tasks:
          running_task.start()
      for running_task in running_tasks: #do some straggler handling here
          running_task.join()
      
      #did client recieve?
      print("SERVER TO CLIENT ROUND 1: checking recieve")
      running_tasks = []
      for client in self.clients:
        running_tasks.append(Process(target=client.receive_message))
      
      #run tasks and join
      for running_task in running_tasks:
          running_task.start()
      for running_task in running_tasks: #do some straggler handling here
          running_task.join()

    
      # CLIENT TO SERVER ROUND 1
      print("CLIENT TO SERVER ROUND 1")
      running_tasks = []
      for client in self.clients:
        running_tasks.append(Process(target=client.send_message, args=(Message("hi from "+str(client.uid)),)))
      
      #run tasks and join
      for running_task in running_tasks:
          running_task.start()
      for running_task in running_tasks: #do some straggler handling here
          running_task.join()

      #did server receive?
      print("CLIENT TO SERVER ROUND 1: check receive")
      running_tasks = []
      running_tasks.append(Process(target=self.s.receive_message))

      #run tasks and join
      for running_task in running_tasks:
          running_task.start()
      for running_task in running_tasks: #do some straggler handling here
          running_task.join()
      


      #average models here
      # self.server.aggregate()

      # return model

def main():
  runner = RunTraining(5)
  runner.forward()

if __name__ == '__main__':
    main()


